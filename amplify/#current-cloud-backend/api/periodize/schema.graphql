type Program
	@model
	@auth(
		rules: [
			{ allow: owner, operations: [create, update, delete, read] }
			{ allow: private, operations: [read] }
			{ allow: public, operations: [read] }
		]
	) {
	id: ID!
	name: String!
	summary: String
	catergory: String
	days: [Day] @connection(keyName: "byProgram", fields: ["id"])
}

type Day
	@model
	@key(name: "byProgram", fields: ["programID"])
	@auth(
		rules: [
			{ allow: owner, operations: [create, update, delete, read] }
			{ allow: private, operations: [read] }
			{ allow: public, operations: [read] }
		]
	) {
	id: ID!
	name: String!
	description: String
	catergory: String
	programID: ID!
	program: Program @connection(fields: ["programID"])
	workout: [Workout] @connection(keyName: "byDay", fields: ["id"])
}

type Workout
	@model
	@auth(
		rules: [
			{ allow: owner, operations: [create, update, delete, read] }
			{ allow: private, operations: [read] }
			{ allow: public, operations: [read] }
		]
	)
	@key(name: "byDay", fields: ["dayID", "name"]) {
	id: ID!
	name: String!
	description: String
	catergory: [String!]!
	lift: [LiftWorkoutJoin]! @connection(keyName: "byWorkout", fields: ["id"])
	day: Day @connection(fields: ["dayID"])
	dayID: ID!
}

type LiftWorkoutJoin
	@model
	@auth(
		rules: [
			{ allow: owner, operations: [create, update, delete, read] }
			{ allow: private, operations: [read] }
			{ allow: public, operations: [read] }
		]
	)
	@key(name: "byLift", fields: ["liftID", "workoutID"])
	@key(name: "byWorkout", fields: ["workoutID", "liftID"]) {
	id: ID!
	liftID: ID!
	workoutID: ID!
	lift: Lift! @connection(fields: ["liftID"])
	workout: Workout! @connection(fields: ["workoutID"])
}

type Lift
	@model
	@auth(
		rules: [
			{ allow: owner, operations: [create, update, delete, read] }
			{ allow: private, operations: [read] }
			{ allow: public, operations: [read] }
		]
	) {
	id: ID!
	name: String!
	description: String
	category: [String!]!
	favorite: Boolean!
	workout: [LiftWorkoutJoin]! @connection(keyName: "byLift", fields: ["id"])
	records: [Record!]! @connection(keyName: "byLift", fields: ["id"])
}

type Record
	@model
	@auth(
		rules: [
			{ allow: owner, operations: [create, update, delete, read] }
			{ allow: private, operations: [read] }
			{ allow: public, operations: [read] }
		]
	)
	@key(name: "byLift", fields: ["liftID", "load"]) {
	id: ID!
	load: Float!
	warmup: Int!
	sets: Int!
	reps: Int!
	unit: String!
	rpe: String!
	percent: String!
	liftID: ID!
	lift: Lift @connection(fields: ["liftID"])
}

# create templates of programs

# "activate' programs and have user go thru them

# log user lifts / performance
# regulate users programs based on performance

# dynamoDB / non relational
